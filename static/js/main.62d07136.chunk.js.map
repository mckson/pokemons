{"version":3,"sources":["components/PokemonType.js","components/PokemonTypes.js","components/PokemonCard.js","components/PokemonSpecies.js","components/PokemonsListToDisplay.js","components/Navbar.js","components/PokemonsList/PokemonsList.js","components/PokemonAbility.js","components/PokemonAbilities.js","components/Statbar.js","components/PokemonStat.js","components/PokemonStats.js","components/PokemonEvolution.js","components/Pokemon.js","App.js","reportWebVitals.js","index.js"],"names":["PokemonType","type","className","name","toUpperCase","PokemonTypes","types","map","slot","PokemonCard","pokemon","onSelect","onClick","image","src","alt","id","toFixed","toString","slice","charAt","PokemonSpecies","props","fetchPokemonSpecies","url","a","fetch","response","json","result","varieties","responsePokemon","resultPokemon","setState","pokemonSpecies","isLoaded","fetchPokemon","renderPokemon","state","this","React","Component","PokemonsListToDisplay","Navbar","onNext","onPrevious","onSelectType","value","index","PokemonsList","renderPokemons","filteredPokemonsBuffer","length","pokemons","offset","limit","filter","lenght","pokemonsToDisplay","pokemonBuffer","newOffset","j","i","pokemon_species","responseSpecies","resultSpecies","push","toFullPokemon","console","log","concat","filterOffset","onNextClick","pokemonsLength","Object","keys","onPreviousClick","e","evolution_chain_url","evolution_chain","evolves_from_species_url","evolves_from_species","sprites","other","front_default","abilities","height","weight","species_name","genera","genus","color","stats","PokemonAbility","ability","is_hidden","PokemonAbilities","Statbar","max","containerStyles","verticalAlign","width","borderRadius","gridArea","style","fillerStyles","backgroundColor","parseInt","PokemonStat","title","PokemonStats","maxValue","Math","stat","base_stat","PokemonEvolution","Pokemon","App","fetchPokemons","pokedex","pokemon_entries","quantity","onSelected","species","selectedPokemon","selectedSpecies","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62d07136.chunk.js","sourcesContent":["const PokemonType = ({ type }) => {\r\n    return (\r\n        <div className={`type ${type.name}`}>\r\n            {type.name.toUpperCase()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokemonType\r\n","import PokemonType from './PokemonType'\r\n\r\nconst PokemonTypes = ({ types }) => {\r\n    return (\r\n        <>\r\n            {\r\n                types.map((type) => (\r\n                    <PokemonType type={type.type} slot={type.slot} key={type.slot} />\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PokemonTypes\r\n","import PokemonTypes from './PokemonTypes'\r\n\r\nconst PokemonCard = ({ pokemon, onSelect }) => {\r\n    // const [pokemon, setPokemon] = useState({\r\n    // const [pokemon] = useState({\r\n    //     id: props.pokemon.id,\r\n    //     name: props.pokemon.name,\r\n    //     image: props.pokemon.sprites.other['official-artwork'].front_default,\r\n    //     types: props.pokemon.types\r\n    // })\r\n\r\n    // console.log(pokemon);\r\n    return (\r\n        <div className='pokemonCard' onClick={() => {onSelect(pokemon)}}>\r\n            {\r\n                pokemon.image ?\r\n                <div className='pokemonCard image'><img src={pokemon.image} alt={pokemon.name} /></div> :\r\n                <div className='pokemonCard image'>No image</div>\r\n            }\r\n            <div className='pokemonCard info'>\r\n                <div className='pokemonCard info id'>{`#${((pokemon.id/1000).toFixed(3)).toString().slice(2)}`}</div>\r\n                <div className='pokemonCard info name'>{pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}</div>\r\n                <div className='pokemonCard info types'>\r\n                    <PokemonTypes types={pokemon.types} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokemonCard\r\n","import React from 'react'\r\nimport PokemonCard from './PokemonCard';\r\n\r\nclass PokemonSpecies extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pokemonSpecies: {},\r\n            pokemon: {},\r\n            isLoaded: false\r\n        }\r\n    }\r\n    // const [error, setError] = useState(null);\r\n    // const [isLoaded, setIsLoaded] = useState(false);\r\n    // const [pokemonSpecies, setPokemonSpecies] = useState({});\r\n    // const [pokemon, setPokemon] = useState({});\r\n\r\n    // const fetchPokemon = async (url, id) => {\r\n    //     const resultPokemon = await fetch(`${url}`);\r\n    //     const pokemon = await resultPokemon.json()\r\n    //     setPokemon({\r\n    //         id: pokemon.id,\r\n    //         name: pokemon.name,\r\n    //         image: pokemon.sprites.other['official-artwork'].front_default,\r\n    //         types: pokemon.types,\r\n    //         abilities: pokemon.abilities,\r\n    //         height: pokemon.height,\r\n    //         weight: pokemon.weight,\r\n    //         species: pokemonSpecies.genera[7].genus,\r\n    //         color: pokemonSpecies.color.name,\r\n    //         stats: pokemon.stats\r\n    //     });\r\n    // }\r\n    componentDidMount() {\r\n        // this.fetchPokemonSpecies(`${this.props.url}`)        \r\n        this.setState({\r\n            isLoaded: true\r\n        })\r\n    }\r\n\r\n    fetchPokemonSpecies = async (url) => {\r\n        const response = await fetch(`${url}`)  \r\n        const result = await response.json()\r\n\r\n        const responsePokemon = await fetch(`${result.varieties[0].pokemon.url}`)\r\n        const resultPokemon = await responsePokemon.json()\r\n        \r\n        this.setState({\r\n            pokemonSpecies: result,\r\n            pokemon: resultPokemon,\r\n            isLoaded: true\r\n        })\r\n    }\r\n\r\n    fetchPokemon = async (url) => {\r\n        const response = await fetch(`${url}`)\r\n        const result = await response.json()\r\n       \r\n        return result;\r\n    }\r\n\r\n    renderPokemon = (pokemon) => (\r\n            <PokemonCard pokemon={pokemon} />\r\n        )\r\n\r\n    render() {\r\n        const { isLoaded, pokemon, pokemonSpecies } = this.state;\r\n        if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <PokemonCard pokemon={this.props.pokemon} onSelect={this.props.onSelect} />\r\n                // <PokemonCard pokemon={pokemon} species={pokemonSpecies} onSelect={this.props.onSelect} />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default PokemonSpecies\r\n","import PokemonSpecies from './PokemonSpecies'\r\nimport React, { useCallback } from 'react'\r\n\r\nconst PokemonsListToDisplay = ( {pokemonSpecies, onSelect} ) => {\r\n    // const [pokemonSpecies, setPokemonSpecies] = useState(pokemonSpecies);\r\n\r\n    // const renderPokemonSpecies = useCallback((pokemon) => (\r\n    const renderPokemonSpecies = (pokemon) => (\r\n        <PokemonSpecies key={pokemon.id} pokemon={pokemon} onSelect={onSelect} />\r\n    )\r\n\r\n    \r\n        return (\r\n            pokemonSpecies.map((pokemon) => <PokemonSpecies key={pokemon.id} pokemon={pokemon} onSelect={onSelect} />)\r\n        )\r\n}\r\n\r\nexport default PokemonsListToDisplay\r\n","import React from 'react'\r\n\r\nconst types = [\r\n    'all',\r\n    'normal',\r\n    'fighting',\r\n    'flying',\r\n    'poison',\r\n    'ground',\r\n    'rock', \r\n    'bug', \r\n    'ghost', \r\n    'steel', \r\n    'fire', \r\n    'water', \r\n    'grass', \r\n    'electric', \r\n    'psychic', \r\n    'ice', \r\n    'dragon',\r\n    'dark',\r\n    'fairy', \r\n    'unknown', \r\n    'shadow'\r\n]\r\n\r\nconst Navbar = ({onNext, onPrevious, onSelectType}) => {\r\n    return (\r\n        <div className='navbar'>\r\n            <div className='navbar buttons'>\r\n                <button className='flex=item' onClick={() => onPrevious()}>Previous</button>\r\n                <button className='flex-item' onClick={() => onNext()}>Next</button>\r\n            </div>\r\n            <div className='navbar menu flex-item'>\r\n                {types.map((value, index) => (\r\n                    <div className='navbar menu types' key={index} onClick={() => {onSelectType(value)}}>{value}</div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\r\nimport PokemonsListToDisplay from '../PokemonsListToDisplay'\r\nimport Navbar from '../Navbar'\r\n\r\nclass PokemonsList extends React.Component {\r\n    //pokemons - array from Pokedex (https://pokeapi.co/api/v2/pokedex/1) which contains objects of type { name, url }\r\n    //limit - number of pokemons should be displayed 'per page'\r\n    constructor(props) {         \r\n        super(props);\r\n        this.state = {\r\n            //offset over filterdPokemonBuffer\r\n            offset: 0,\r\n            //offset over ALL pokemons from props\r\n            filterOffset: 0,\r\n            //array of pokemons \r\n            pokemonsToDisplay: [],\r\n            //default filter which contains objects of type { name, url } that will be passed down to child components\r\n            filter: 'all',\r\n            //flag shows could we render pokemon list or it is no 'calculated' yet\r\n            isLoaded: false,       \r\n            //array to cache filtered pokemons for correct navigation (next, previous)     \r\n            filteredPokemonsBuffer: []  \r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.renderPokemons();\r\n        this.setState({\r\n            isLoaded: true,\r\n            pokemonsToDisplay: this.state.filteredPokemonsBuffer.slice(this.state.offset, this.state.offset + this.props.limit)\r\n        })\r\n    }\r\n\r\n    //method required for changing pokemonsToDisplay state\r\n    renderPokemons = async () => {\r\n        await this.setState({\r\n            isLoaded: false\r\n        })\r\n\r\n        //case when methos invoked in componentDidMount()\r\n        if (this.state.filteredPokemonsBuffer.length === 0) {\r\n            await this.fetchPokemonSpecies(this.props.pokemons, this.state.offset, this.props.limit, this.state.filter, this.props.lenght);\r\n        }\r\n\r\n        //making steps over array of 'cached' pokemons\r\n        await this.setState({\r\n            pokemonsToDisplay: this.state.filteredPokemonsBuffer.slice(this.state.offset, this.state.offset + this.props.limit  ),\r\n            isLoaded: true\r\n        })\r\n    }    \r\n\r\n    fetchPokemonSpecies = async (pokemons, offset, limit, filter, lenght) => {\r\n        let pokemonBuffer = []      //buffer array for fetching portion of pokemons\r\n        let newOffset = offset      //variable for defining next offset over pokemons list from PROPS\r\n        let j = 0;\r\n\r\n        for (let i = 0; j < limit && i + offset < lenght - 1; ++i) {\r\n            try {\r\n                const responseSpecies = await fetch(`${pokemons[offset + i].pokemon_species.url}`)\r\n                const resultSpecies = await responseSpecies.json()\r\n\r\n                let responsePokemon;\r\n                let resultPokemon;\r\n\r\n                try {\r\n                    responsePokemon = await fetch(`${resultSpecies.varieties[0].pokemon.url}`)\r\n                    resultPokemon = await responsePokemon.json()\r\n\r\n                    for (const type of resultPokemon.types) {\r\n                        if (filter === 'all' || type.type.name === filter) {\r\n                            ++j;\r\n                            \r\n                            newOffset = i + offset;\r\n\r\n                            pokemonBuffer.push(this.toFullPokemon(resultSpecies, resultPokemon));\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                    continue;\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n                continue;\r\n            }\r\n        }\r\n\r\n        //concatination of previous array of 'cached' pokemons and this new portion\r\n        await this.setState({\r\n            filteredPokemonsBuffer: this.state.filteredPokemonsBuffer.concat(pokemonBuffer),\r\n            filterOffset: newOffset + 1\r\n        })\r\n    }\r\n\r\n    onNextClick = async () => {\r\n        const pokemonsLength = Object.keys(this.props.pokemons).length;\r\n\r\n        if (this.state.filterOffset + this.props.limit + 1 < pokemonsLength) {\r\n            await this.setState({\r\n                offset: this.state.offset + this.props.limit\r\n            });\r\n\r\n            //when there is offset greater that size of filtered ('cached') elements we fetch next portion of data\r\n            if (this.state.offset >= Object.keys(this.state.filteredPokemonsBuffer).length) {\r\n               await this.fetchPokemonSpecies(this.props.pokemons, this.state.filterOffset, this.props.limit, this.state.filter, this.props.lenght);\r\n            }\r\n            console.log('next cliked');\r\n\r\n            this.renderPokemons();\r\n        }\r\n    }\r\n    \r\n    onPreviousClick = async () => {\r\n        if (this.state.offset > 0) {\r\n            await this.setState({\r\n                offset: this.state.offset - this.props.limit\r\n            });\r\n            console.log('previous cliked');\r\n        \r\n            this.renderPokemons();\r\n        }\r\n    }\r\n\r\n    onSelectType = async (e) => {\r\n        await this.setState({\r\n            filter: e,\r\n            offset: 0,\r\n            filteredPokemonsBuffer: [],\r\n            filterOffset: 0\r\n        });\r\n        this.renderPokemons();\r\n    }\r\n\r\n    //function that combines pokemonSpecies and pokemon into one object with all necessary properties\r\n    toFullPokemon(pokemonSpecies, pokemon) {\r\n        return {\r\n            id: pokemonSpecies.id,\r\n            name: pokemonSpecies.name,\r\n            evolution_chain_url: pokemonSpecies.evolution_chain.url,\r\n            evolves_from_species_url: pokemonSpecies.evolves_from_species?.url,\r\n            image: pokemon.sprites.other['official-artwork'].front_default,\r\n            types: pokemon.types,\r\n            abilities: pokemon.abilities,\r\n            height: pokemon.height,\r\n            weight: pokemon.weight,\r\n            species_name: pokemonSpecies.genera[7].genus,\r\n            color: pokemonSpecies.color.name,\r\n            stats: pokemon.stats\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='pokemonList'>\r\n                <Navbar onNext={this.onNextClick} onPrevious={this.onPreviousClick} onSelectType={this.onSelectType} />\r\n                {\r\n                    this.state.isLoaded ?\r\n                    <div className='pokemonList list'>\r\n                        {\r\n                            this.state.pokemonsToDisplay === null ? \r\n                            <div>Loading...</div> : \r\n                            <PokemonsListToDisplay pokemonSpecies={this.state.pokemonsToDisplay} onSelect={this.props.onSelect} />\r\n                        }\r\n                    </div> :\r\n                    <div className='pokemonList list'>Loading...</div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PokemonsList\r\n","const PokemonAbility = ({ ability }) => {\r\n    return (\r\n        <div className='ability'>\r\n            {ability.slot} {ability.ability.name} {ability.is_hidden && '(Hidden)'}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokemonAbility\r\n","import PokemonAbility from './PokemonAbility'\r\n\r\nconst PokemonAbilities = ({ abilities }) => {\r\n    return (\r\n        <>\r\n            {\r\n                abilities.map((ability, index) => (\r\n                    <PokemonAbility ability={ability} key={index} />\r\n                )) \r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PokemonAbilities\r\n","const Statbar = ({ value, max, style }) => {\r\n    const containerStyles = {\r\n        verticalAlign: 'middle',\r\n        height: 10,\r\n        width: '225px',\r\n        borderRadius: 5,\r\n        gridArea: style.gridArea\r\n    }\r\n    \r\n      const fillerStyles = {\r\n        height: '100%',\r\n        width: `${value * 100 / 225}%`,\r\n        backgroundColor: `#${(parseInt(value) === parseInt(max)) ? 'A2E333' : 'FD7F28'}`,\r\n        borderRadius: 'inherit'\r\n      }\r\n    return (\r\n        <div style={containerStyles}>\r\n          <div style={fillerStyles}>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statbar\r\n","import Statbar from './Statbar'\r\n\r\nconst PokemonStat = ({ title, value, max }) => {\r\n    const titleStyle = {\r\n        gridArea: 'title',\r\n    }\r\n    const valueStyle = {\r\n        gridArea: 'value',\r\n    }\r\n    const barStyle = {\r\n        gridArea: 'bar',\r\n    }\r\n    return (\r\n        <div className='stat item'>\r\n            <div style={titleStyle}>{title}</div>\r\n            <div style={valueStyle}>{value}</div>\r\n            <Statbar value={value} max={max} style={barStyle} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokemonStat\r\n","import PokemonStat from './PokemonStat'\r\n\r\nconst PokemonStats = ({ stats }) => {\r\n    const maxValue = Math.max(...stats.map((stat) => (stat.base_stat)));\r\n    return (\r\n        <div className='stats'>\r\n            {\r\n                stats.map((stat, index) => (\r\n                    <PokemonStat title={stat.stat.name} value={stat.base_stat} max={maxValue} key={index} />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokemonStats\r\n","const PokemonEvolution = props => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nPokemonEvolution.propTypes = {\r\n\r\n}\r\n\r\nexport default PokemonEvolution\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PokemonTypes from './PokemonTypes';\r\nimport PokemonAbilities from './PokemonAbilities';\r\nimport PokemonStats from './PokemonStats';\r\nimport PokemonEvolution from './PokemonEvolution';\r\n\r\nconst Pokemon = ({ pokemon }) => {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = { \r\n    //         pokemon: props.pokemon,\r\n    //         pokemonUrl: props.url,\r\n    //         isLoaded: false\r\n    //     };\r\n    // }\r\n\r\n    // componentDidMount() {\r\n    //     // this.fetchPokemon(this.state.pokemonUrl, this.state.pokemonId);\r\n    // }\r\n\r\n    // fetchPokemon = async (url, id) => {\r\n    //     const resultPokemon = await fetch(`${url}`);\r\n    //     const pokemon = await resultPokemon.json();\r\n\r\n    //     const resultPokemonSpecies = await fetch(pokemon.species.url);\r\n    //     const pokemonSpecies = await resultPokemonSpecies.json();\r\n\r\n    //     this.setState({\r\n    //         isLoaded: true,\r\n    //         pokemon: {\r\n    //             id: pokemon.id,\r\n    //             name: pokemon.name,\r\n    //             image: pokemon.sprites.other['official-artwork'].front_default,\r\n    //             types: pokemon.types,\r\n    //             abilities: pokemon.abilities,\r\n    //             height: pokemon.height,\r\n    //             weight: pokemon.weight,\r\n    //             species: pokemonSpecies.genera[7].genus,\r\n    //             color: pokemonSpecies.color.name,\r\n    //             stats: pokemon.stats\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n\r\n\r\n    \r\n        if (!pokemon) {\r\n            return <div>No selected pokemon</div>\r\n        }\r\n        else{\r\n            return (\r\n                <div className='pokemon'>\r\n                    <div className='pokemon pokedexData'>\r\n                        <div className='pokemon pokedexData image'>\r\n                            <img src={pokemon.image} alt={pokemon.name} />\r\n                        </div>\r\n                        <div className='pokemon pokedexData data'>\r\n                            <h3>Pokedex Data</h3> \r\n                            <div className='pokemon pokedexData data item'>\r\n                            Name: {pokemon.name}\r\n                            </div>\r\n                            <div className='pokemon pokedexData data item'>\r\n                                Types: <PokemonTypes types={pokemon.types} color={pokemon.color} />\r\n                            </div>\r\n                            <div className='pokemon pokedexData data item'>\r\n                                National №: {`#${((pokemon.id/1000).toFixed(3)).toString().slice(2)}`}\r\n                            </div>\r\n                            <div className='pokemon pokedexData data item'>\r\n                                Species: {pokemon.species_name}\r\n                            </div>\r\n                            <div className='pokemon pokedexData data item'>\r\n                                Height: {pokemon.height / 10} m\r\n                            </div>\r\n                            <div className='pokemon pokedexData data item'>\r\n                                Weight: {pokemon.weight / 10} kg\r\n                            </div>\r\n                            <div className='pokemon pokedexData data item'>\r\n                                Abilities: <PokemonAbilities abilities={pokemon.abilities} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='pokemon baseStats'>\r\n                        <h4>Base stats</h4>\r\n                        <PokemonStats stats={pokemon.stats} />\r\n                    </div>\r\n                    <PokemonEvolution />\r\n                </div>\r\n            );\r\n        }\r\n    \r\n}\r\n\r\nPokemon.propTypes = {\r\n    id: PropTypes.number\r\n}\r\n\r\nexport default Pokemon\r\n","import PokemonsList from './components/PokemonsList/PokemonsList'\nimport Pokemon from './components/Pokemon'\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedPokemon: null,\n      selectedSpecies: null,\n      pokemons: [],\n      url: 'https://pokeapi.co/api/v2/pokedex/1',\n      isLoaded: false,\n      quantity: 0\n    }\n  }\n\n  componentDidMount() {\n    this.fetchPokemons(`${this.state.url}`);\n  }\n\n  fetchPokemons = async (url) => {\n    const response = await fetch(`${url}`);\n    const pokedex = await response.json();\n\n    // console.log(Object.keys(pokedex.pokemon_entries).length); \n\n    this.setState({\n      isLoaded: true,\n      pokemons: pokedex.pokemon_entries,\n      quantity: Object.keys(pokedex.pokemon_entries).length\n    });\n  }\n\n  onSelected = (pokemon, species) => {\n    this.setState({\n      selectedPokemon: pokemon,\n      selectedSpecies: species\n    })\n  }\n\n  render() {\n    if (!this.state.isLoaded){\n        return <div>Loading...</div>\n    }\n    else {\n      return (\n        <div className=\"App\">\n          <h1>Pokemons App</h1>\n          <Pokemon pokemon={this.state.selectedPokemon} species={this.state.selectedSpecies} />\n          <PokemonsList limit={15} pokemons={this.state.pokemons} lenght={this.state.quantity} onSelect={this.onSelected} />\n        </div>\n      );\n    }\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}